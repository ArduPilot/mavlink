<?xml version="1.0"?>
<mavlink>
  <!-- XML file for prototyping definitions for standard.xml  -->
  <include>standard.xml</include>
  <version>0</version>
  <dialect>0</dialect>
  <enums>
    <enum name="AIRSPEED_SENSOR_FLAGS" bitmask="true">
      <description>Airspeed sensor flags</description>
      <entry value="0" name="AIRSPEED_SENSOR_UNHEALTHY">
        <description>Airspeed sensor is unhealthy</description>
      </entry>
      <entry value="1" name="AIRSPEED_SENSOR_USING">
        <description>True if the data from this sensor is being actively used by the flight controller for guidance, navigation or control.</description>
      </entry>
    </enum>
    <enum name="RADIO_RC_CHANNELS_FLAGS" bitmask="true">
      <description>RADIO_RC_CHANNELS flags (bitmask).</description>
      <entry value="1" name="RADIO_RC_CHANNELS_FLAGS_FAILSAFE">
        <description>Failsafe is active. The content of the RC channels data in the RADIO_RC_CHANNELS message is implementation dependent.</description>
      </entry>
      <entry value="2" name="RADIO_RC_CHANNELS_FLAGS_OUTDATED">
        <description>Channel data may be out of date. This is set when the receiver is unable to validate incoming data from the transmitter and has therefore resent the last valid data it received.</description>
      </entry>
    </enum>
    <enum name="RADIO_LINK_STATS_FLAGS" bitmask="true">
      <description>RADIO_LINK_STATS flags (bitmask).</description>
      <entry value="1" name="RADIO_LINK_STATS_FLAGS_RSSI_DBM">
        <description>Rssi values are in negative dBm. Values 1..254 corresponds to -1..-254 dBm. 0: no reception, UINT8_MAX: unknown.</description>
      </entry>
    </enum>
    <enum name="RADIO_LINK_STATS_ANTENNA_FLAGS" bitmask="true">
      <description>RADIO_LINK_STATS antenna flags (bitmask).
        The RX_RECEIVE and TX_RECEIVE flags indicate from which antenna the received data are taken for processing.
        The RX_TRANSMIT and TX_TRANSMIT flags specify which antenna are transmitting data.
        Both antenna 1 and antenna 2 transmit flags can be set simultaneously, e.g., in case of dual-band or dual-frequency systems.
        If neither flag is set then antenna 1 should be assumed.
      </description>
      <entry value="0x01" name="RADIO_LINK_STATS_ANTENNA_FLAGS_RX_RECEIVE_ANTENNA2">
        <description>Rx receive antenna. If the flag is set, then the data received on antenna 2 are taken, else the data stems from antenna 1.</description>
      </entry>
      <entry value="0x02" name="RADIO_LINK_STATS_ANTENNA_FLAGS_RX_TRANSMIT_ANTENNA1">
        <description>Rx transmit antenna. Data are transmitted on antenna 1.</description>
      </entry>
      <entry value="0x04" name="RADIO_LINK_STATS_ANTENNA_FLAGS_RX_TRANSMIT_ANTENNA2">
        <description>Rx transmit antenna. Data are transmitted on antenna 2.</description>
      </entry>
      <entry value="0x08" name="RADIO_LINK_STATS_ANTENNA_FLAGS_TX_RECEIVE_ANTENNA2">
        <description>Tx receive antenna. If the flag is set, then the data received on antenna 2 are taken, else the data stems from antenna 1.</description>
      </entry>
      <entry value="0x10" name="RADIO_LINK_STATS_ANTENNA_FLAGS_TX_TRANSMIT_ANTENNA1">
        <description>Tx transmit antenna. Data are transmitted on antenna 1.</description>
      </entry>
      <entry value="0x20" name="RADIO_LINK_STATS_ANTENNA_FLAGS_TX_TRANSMIT_ANTENNA2">
        <description>Tx transmit antenna. Data are transmitted on antenna 2.</description>
      </entry>
    </enum>
    <enum name="MAV_CMD">
      <entry value="610" name="MAV_CMD_DO_SET_SYS_CMP_ID" hasLocation="false" isDestination="false">
        <description>
          Set system and component id.
          This allows moving of a system and all its components to a new system id, or moving a particular component to a new system/component id.
          Recipients must reject command addressed to broadcast system ID.
        </description>
        <param index="1" label="System ID" minValue="1" maxValue="255" increment="1">New system ID for target component(s). 0: ignore and reject command (broadcast system ID not allowed).</param>
        <param index="2" label="Component ID" minValue="0" maxValue="255" increment="1">New component ID for target component(s). 0: ignore (component IDs don't change).</param>
        <param index="3" label="Reboot">Reboot components after ID change. Any non-zero value triggers the reboot.</param>
        <param index="4" reserved="true" default="NaN"/>
      </entry>
      <entry value="43004" name="MAV_CMD_EXTERNAL_WIND_ESTIMATE" hasLocation="false" isDestination="false">
        <description>Set an external estimate of wind direction and speed.
          This might be used to provide an initial wind estimate to the estimator (EKF) in the case where the vehicle is wind dead-reckoning, extending the time when operating without GPS before before position drift builds to an unsafe level. For this use case the command might reasonably be sent every few minutes when operating at altitude, and the value is cleared if the estimator resets itself.
        </description>
        <param index="1" label="Wind speed" units="m/s" minValue="0">Horizontal wind speed.</param>
        <param index="2" label="Wind speed accuracy" units="m/s">Estimated 1 sigma accuracy of wind speed. Set to NaN if unknown.</param>
        <param index="3" label="Direction" units="deg" minValue="0" maxValue="360">Azimuth (relative to true north) from where the wind is blowing.</param>
        <param index="4" label="Direction accuracy" units="deg">Estimated 1 sigma accuracy of wind direction. Set to NaN if unknown.</param>
        <param index="5">Empty</param>
        <param index="6">Empty</param>
        <param index="7">Empty</param>
      </entry>
    </enum>
  </enums>
  <messages>
    <message id="53" name="MISSION_CHECKSUM">
      <description>Checksum for the current mission, rally point or geofence plan, or for the "combined" plan (a GCS can use these checksums to determine if it has matching plans).
        This message must be broadcast with the appropriate checksum following any change to a mission, geofence or rally point definition
        (immediately after the MISSION_ACK that completes the upload sequence).
        It may also be requested using MAV_CMD_REQUEST_MESSAGE, where param 2 indicates the plan type for which the checksum is required.
        The checksum must be calculated on the autopilot, but may also be calculated by the GCS.
        The checksum uses the same CRC32 algorithm as MAVLink FTP (https://mavlink.io/en/services/ftp.html#crc32-implementation).
        The checksum for a mission, geofence or rally point definition is run over each item in the plan in seq order (excluding the home location if present in the plan), and covers the following fields (in order):
        frame, command, autocontinue, param1, param2, param3, param4, param5, param6, param7.
        The checksum for the whole plan (MAV_MISSION_TYPE_ALL) is calculated using the same approach, running over each sub-plan in the following order: mission, geofence then rally point.
      </description>
      <field type="uint8_t" name="mission_type" enum="MAV_MISSION_TYPE">Mission type.</field>
      <field type="uint32_t" name="checksum">CRC32 checksum of current plan for specified type.</field>
    </message>
    <message id="295" name="AIRSPEED">
      <description>Airspeed information from a sensor.</description>
      <field type="uint8_t" name="id" instance="true">Sensor ID.</field>
      <field type="float" name="airspeed" units="m/s">Calibrated airspeed (CAS).</field>
      <field type="int16_t" name="temperature" units="cdegC">Temperature. INT16_MAX for value unknown/not supplied.</field>
      <field type="float" name="raw_press" units="hPa">Raw differential pressure. NaN for value unknown/not supplied.</field>
      <field type="uint8_t" name="flags" enum="AIRSPEED_SENSOR_FLAGS">Airspeed sensor flags.</field>
    </message>
    <message id="420" name="RADIO_RC_CHANNELS">
      <description>RC channel outputs from a MAVLink RC receiver for input to a flight controller or other components (allows an RC receiver to connect via MAVLink instead of some other protocol such as PPM-Sum or S.BUS).
        Note that this is not intended to be an over-the-air format, and does not replace RC_CHANNELS and similar messages reported by the flight controller.
        The target_system field should normally be set to the system id of the system to control, typically the flight controller.
        The target_component field can normally be set to 0, so that all components of the system can receive the message.
        The channels array field can publish up to 32 channels; the number of channel items used in the array is specified in the count field.
        The time_last_update_ms field contains the timestamp of the last received valid channels data in the receiver's time domain.
        The count field indicates the first index of the channel array that is not used for channel data (this and later indexes are zero-filled).
        The RADIO_RC_CHANNELS_FLAGS_OUTDATED flag is set by the receiver if the channels data is not up-to-date (for example, if new data from the transmitter could not be validated so the last valid data is resent).
        The RADIO_RC_CHANNELS_FLAGS_FAILSAFE failsafe flag is set by the receiver if the receiver's failsafe condition is met (implementation dependent, e.g., connection to the RC radio is lost).
        In this case time_last_update_ms still contains the timestamp of the last valid channels data, but the content of the channels data is not defined by the protocol (it is up to the implementation of the receiver).
        For instance, the channels data could contain failsafe values configured in the receiver; the default is to carry the last valid data.
        Note: The RC channels fields are extensions to ensure that they are located at the end of the serialized payload and subject to MAVLink's trailing-zero trimming.
      </description>
      <field type="uint8_t" name="target_system">System ID (ID of target system, normally flight controller).</field>
      <field type="uint8_t" name="target_component">Component ID (normally 0 for broadcast).</field>
      <field type="uint32_t" name="time_last_update_ms" units="ms">Time when the data in the channels field were last updated (time since boot in the receiver's time domain).</field>
      <field type="uint16_t" name="flags" enum="RADIO_RC_CHANNELS_FLAGS" display="bitmask">Radio RC channels status flags.</field>
      <field type="uint8_t" name="count">Total number of RC channels being received. This can be larger than 32, indicating that more channels are available but not given in this message.</field>
      <extensions/>
      <field type="int16_t[32]" name="channels" minValue="-4096" maxValue="4096">RC channels.
        Channel values are in centered 13 bit format. Range is -4096 to 4096, center is 0. Conversion to PWM is x * 5/32 + 1500.
        Channels with indexes equal or above count should be set to 0, to benefit from MAVLink's trailing-zero trimming.</field>
    </message>
    <message id="421" name="RADIO_LINK_STATS">
      <description>Radio link statistics for a MAVLink RC receiver or transmitter. Tx: ground-side device, Rx: vehicle-side device.
        The message is normally emitted in regular time intervals upon each actual or expected receiption of an over-the-air data packet on the link.
        A MAVLink RC receiver should emit it shortly after it emits a RADIO_RC_CHANNELS message (if it is emitting that message).
        Per default, rssi values are in MAVLink units: 0 represents weakest signal, 254 represents maximum signal.
        The RADIO_LINK_STATS_FLAGS_RSSI_DBM flag is set if the rssi units are negative dBm: 1..254 correspond to -1..-254 dBm, 0 represents no receiption.
        The target_system field should normally be set to the system id of the system the link is connected to, typically the flight controller.
        The target_component field can normally be set to 0, so that all components of the system can receive the message.
      </description>
      <field type="uint8_t" name="target_system">System ID (ID of target system, normally flight controller).</field>
      <field type="uint8_t" name="target_component">Component ID (normally 0 for broadcast).</field>
      <field type="uint8_t" name="flags" enum="RADIO_LINK_STATS_FLAGS" display="bitmask">Radio link statistics flags.</field>
      <field type="uint8_t" name="rx_LQ_rc" units="c%" invalid="UINT8_MAX">Link quality of RC data stream from Tx to Rx. Values: 1..100, 0: no link connection, UINT8_MAX: unknown.</field>
      <field type="uint8_t" name="rx_LQ_ser" units="c%" invalid="UINT8_MAX">Link quality of serial MAVLink data stream from Tx to Rx. Values: 1..100, 0: no link connection, UINT8_MAX: unknown.</field>
      <field type="uint8_t" name="rx_rssi1" invalid="UINT8_MAX">Rssi of antenna 1. 0: no reception, UINT8_MAX: unknown.</field>
      <field type="int8_t" name="rx_snr1" invalid="INT8_MAX">Noise on antenna 1. Radio link dependent. INT8_MAX: unknown.</field>
      <field type="uint8_t" name="rx_rssi2" invalid="UINT8_MAX">Rssi of antenna 2. 0: no reception, UINT8_MAX: use rx_rssi1 if it is known else unknown.</field>
      <field type="int8_t" name="rx_snr2" invalid="INT8_MAX">Noise on antenna 2. Radio link dependent. INT8_MAX: use rx_snr1 if it is known else unknown.</field>
      <field type="uint8_t" name="tx_LQ_ser" units="c%" invalid="UINT8_MAX">Link quality of serial MAVLink data stream from Rx to Tx. Values: 1..100, 0: no link connection, UINT8_MAX: unknown.</field>
      <field type="uint8_t" name="tx_rssi1" invalid="UINT8_MAX">Rssi of antenna 1. 0: no reception. UINT8_MAX: unknown.</field>
      <field type="int8_t" name="tx_snr1" invalid="INT8_MAX">Noise on antenna 1. Radio link dependent. INT8_MAX: unknown.</field>
      <field type="uint8_t" name="tx_rssi2" invalid="UINT8_MAX">Rssi of antenna 2. 0: no reception. UINT8_MAX: use tx_rssi1 if it is known else unknown.</field>
      <field type="int8_t" name="tx_snr2" invalid="INT8_MAX">Noise on antenna 2. Radio link dependent. INT8_MAX: use tx_snr1 if it is known else unknown.</field>
      <field type="uint16_t" name="antenna_flags" enum="RADIO_LINK_STATS_ANTENNA_FLAGS" display="bitmask">Radio link antenna flags. 0: unknown, assume antenna 1 for all categories.</field>
      <extensions/>
      <field type="float" name="frequency1" units="Hz" invalid="0">Frequency on antenna1 in Hz. 0: unknown.</field>
      <field type="float" name="frequency2" units="Hz" invalid="0">Frequency on antenna2 in Hz. 0: unknown.</field>
    </message>
  </messages>
</mavlink>
