<?xml version="1.0"?>
<mavlink>
  <!-- XML file for prototyping definitions for standard.xml  -->
  <include>standard.xml</include>
  <version>0</version>
  <dialect>0</dialect>
  <enums>
    <enum name="AIRSPEED_SENSOR_FLAGS" bitmask="true">
      <description>Airspeed sensor flags</description>
      <entry value="0" name="AIRSPEED_SENSOR_UNHEALTHY">
        <description>Airspeed sensor is unhealthy</description>
      </entry>
      <entry value="1" name="AIRSPEED_SENSOR_USING">
        <description>True if the data from this sensor is being actively used by the flight controller for guidance, navigation or control.</description>
      </entry>
    </enum>
    <enum name="RADIO_RC_CHANNELS_FLAGS" bitmask="true">
      <description>RADIO_RC_CHANNELS flags (bitmask).</description>
      <entry value="1" name="RADIO_RC_CHANNELS_FLAGS_FAILSAFE">
        <description>Failsafe is active.</description>
      </entry>
    </enum>
  </enums>
  <messages>
    <message id="53" name="MISSION_CHECKSUM">
      <description>Checksum for the current mission, rally point or geofence plan, or for the "combined" plan (a GCS can use these checksums to determine if it has matching plans).
        This message must be broadcast with the appropriate checksum following any change to a mission, geofence or rally point definition
        (immediately after the MISSION_ACK that completes the upload sequence).
        It may also be requested using MAV_CMD_REQUEST_MESSAGE, where param 2 indicates the plan type for which the checksum is required.
        The checksum must be calculated on the autopilot, but may also be calculated by the GCS.
        The checksum uses the same CRC32 algorithm as MAVLink FTP (https://mavlink.io/en/services/ftp.html#crc32-implementation).
        The checksum for a mission, geofence or rally point definition is run over each item in the plan in seq order (excluding the home location if present in the plan), and covers the following fields (in order):
        frame, command, autocontinue, param1, param2, param3, param4, param5, param6, param7.
        The checksum for the whole plan (MAV_MISSION_TYPE_ALL) is calculated using the same approach, running over each sub-plan in the following order: mission, geofence then rally point.
      </description>
      <field type="uint8_t" name="mission_type" enum="MAV_MISSION_TYPE">Mission type.</field>
      <field type="uint32_t" name="checksum">CRC32 checksum of current plan for specified type.</field>
    </message>
    <message id="295" name="AIRSPEED">
      <description>Airspeed information from a sensor.</description>
      <field type="uint8_t" name="id" instance="true">Sensor ID.</field>
      <field type="float" name="airspeed" units="m/s">Calibrated airspeed (CAS).</field>
      <field type="int16_t" name="temperature" units="cdegC">Temperature. INT16_MAX for value unknown/not supplied.</field>
      <field type="float" name="raw_press" units="hPa">Raw differential pressure. NaN for value unknown/not supplied.</field>
      <field type="uint8_t" name="flags" enum="AIRSPEED_SENSOR_FLAGS">Airspeed sensor flags.</field>
    </message>
    <message id="420" name="RADIO_RC_CHANNELS">
      <description>RC channel inputs for a flight controller and associated components; the message does not replace the RC_CHANNELS and similar output messages.
        Supports up to 32 channels. Channel values are in centered 13 bit format. Range is -4096 to 4096, center is 0. Conversion to PWM is x * 5/32 + 1500.
        The target_system field should normally be set to the system id of the system to control, typically the flight controller.
        The target_component field can normally be set to 0, so that all components of the system can receive the message.
        The time_last_update_ms field indicates the time, in the sender's time domain, when the RC channels data were last updated. If this time is significantly shorter
        than the expected update time for this message, then the RC channels data can be considered invalid, and the RC channels data should carry the last valid data.
        In the case of a failsafe (when the RADIO_RC_CHANNELS_FLAGS_FAILSAFE bit set in the flags field), the RC channels data can be frozen and carried forward, e.g.,
        the last valid data or failsafe values configured in the sender of the message. The exact behavior is not defined by the protocol but up to the implementation
        of the sender; the default is to carry the last valid data.
        Note: The RC channels fields are extensions to ensure that they are located at the end of the serialized payload and subject to MAVLink's trailing-zero trimming.
        </description>
      <field type="uint8_t" name="target_system">System ID (can be 0 for broadcast, but this is discouraged).</field>
      <field type="uint8_t" name="target_component">Component ID (normally 0 for broadcast).</field>
      <field type="uint32_t" name="time_last_update_ms" units="ms">Time when RC channels were last updated (time since boot in the sender's time domain).</field>
      <field type="uint16_t" name="flags" enum="RADIO_RC_CHANNELS_FLAGS" display="bitmask">Radio RC channels status flags.</field>
      <field type="uint8_t" name="count">Total number of RC channels being received. This can be larger than 32, indicating that more channels are available but not given in this message.</field>
      <extensions/>
      <field type="int16_t[32]" name="channels">RC channels. Channels that are above the field count should be set to 0, to benefit from MAVLink's trailing-zero trimming.</field>
    </message>
  </messages>
</mavlink>
